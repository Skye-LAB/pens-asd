#include <stdio.h>
#define N 5
#define M 1000
#define MAX 50

typedef int Itemtype;
typedef struct {
  Itemtype item[MAX];
  int front;
  int rear;
  int count;
} Queue;

void inisialisasi(Queue *q) { q->front = q->rear = q->count = 0; }

int Kosong(Queue *q) { return (q->count == 0); }

int Penuh(Queue *q) { return (q->count == MAX); }

void Enqueue(Queue *q, Itemtype x) {
  if (Penuh(q))
    printf("Queue Penuh \n");
  else {
    q->item[q->rear] = x;
    q->rear = (q->rear + 1) % MAX;
    q->count++;
  }
}

Itemtype Dequeue(Queue *q) {
  Itemtype temp = -1;
  if (Kosong(q))
    printf("Queue Kosong \n");
  else {
    temp = q->item[q->front];
    q->front = (q->front + 1) % MAX;
    q->count--;
  }
  return temp;
}

void inisialisasiDjikstra(int Q[], int R[], int asal) {
  int i;
  for (i = 0; i < N; i++) {
    if (i == asal - 1)
      Q[i] = 0;
    else
      Q[i] = M;
    R[i] = 0;
  }
}

int ada_di_queue(Queue *q, int i) {
  int ada = 0, pos;
  pos = q->front;
  while (!ada && pos != q->rear) {
    if (q->item[pos] == i + 1)
      ada = 1;
    pos = (pos + 1) % MAX;
  }
  return ada;
}

void cetak(int A[], char *judul) {
  int i;
  printf("%s : ", judul);
  for (i = 0; i < N; i++)
    if (A[i] < M)
      printf("%d ", A[i]);
    else
      printf("M ");
  printf("\n");
}

int main() {
  int input[N][N] = {M, 1, 3, M, M, M, M, 1, M, 5, 3, M, M,
                     2, M, M, M, M, M, 1, M, M, M, M, M};
  int asal, tujuan, Q[N], R[N], CN, i;
  Queue ant;
  inisialisasi(&ant);
  printf("Masukkan Asal Dan tujuan : ");
  scanf("%d %d", &asal, &tujuan);
  inisialisasiDjikstra(Q, R, asal);
  cetak(Q, "Beban");
  cetak(R, "Rute");
  puts("");
  Enqueue(&ant, asal);
  while (!Kosong(&ant)) {
    CN = Dequeue(&ant) - 1;
    for (i = 0; i < N; i++) {
      if (input[CN][i] != M) {
        if (Q[CN] + input[CN][i] < Q[i]) {
          Q[i] = Q[CN] + input[CN][i];
          R[i] = CN + 1;
          if (i != asal - 1 && i != tujuan - 1 && !ada_di_queue(&ant, i))
            Enqueue(&ant, i + 1);
        }
      }
    }
  }
  cetak(Q, "Beban");
  cetak(R, "Rute");
}
